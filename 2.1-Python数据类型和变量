整数
在程序中的写法与数学中的写法一致,例如 1,100,-199,0等等
也可以使用十六进制表示整数,这时需要用0x前缀和0-9,a-f表示,例如0xff1等等

浮点数
也就是小数.对于很大或者很小的浮点数,就必须用科学计数法表示,用e代替10.  1.23*10^9就是1.23e9,或者12.3e8,0.000012可表示为1.2e-5,等等

字符串
字符串就是以单引号''或双引号""括起来的任意文本,比如'abc',"xyz"等.请注意,字符串内容只包括abc,xyz.而''和""都不是字符串的一部分.
当字符串内部包含'或"该怎么办?利用转义字符\来标识.比如:
'I\'m\"ok!\"!'
表示的字符串内容是: I'm "ok!"

\n表示换行,\t表示制表符,\\表示字符\,在''或""前面添加r表示''或"",内部字符串默认不转义
print('\\\t\\')    输出: \
print(r'\\\t\\')   输出: \\\t\\

当字符串内部有多行时,在程序中使用'''...''':
print('''line1
line2
line3''')
输出:
line1
line2
line3


布尔值
只有True,False两种值(注意大小写).可以用and,or,not运算.and是与运算,or是或运算,not是非运算(取反运算)

空值
用None表示,注意它不是0,因为0是有意义的.

变量
变量必须是大小写英文,数字和_的组合,且不能以数字开头.
不同与c/c++,定义变量的时候先声明它的类型,在Python里面变量类型是不固定的.这种语言称为动态语言,与之相对应的是静态语言.
静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错

关于变量在计算机内存中的表示:  a='ABC'
Python解释器干了两件事:1-在内存中创建了一个'ABC'的字符串;2-在内存中创建了一个名为a的变量,并把它指向'ABC'

理解以下一下代码:
a = 'ABC'
b = a
a = 'XYZ'
print(b)

执行a = 'ABC'，解释器创建了字符串'ABC'和变量a，并把a指向'ABC'
执行b = a，解释器创建了变量b，并把b指向a指向的字符串'ABC'
执行a = 'XYZ'，解释器创建了字符串'XYZ'，并把a的指向改为'XYZ'，但b并没有更改
所以，最后打印变量b的结果自然是'ABC'了

常量
在Python中,通常用全部大写的变量名表示常量:PI=3.1415926
但事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变，所以，用全部大写的变量名表示常量只是一个习惯上的用法，
如果你一定要改变变量PI的值，也没人能拦住你

解释一下在Python中整数的触发为什么是精确的?
在Python中,有两种除法,一种除法是/
10 / 3      输出:3.3333333333333335
9 / 3       输出:3.0
即使两个能够整除的整数相除,结果也是浮点数.

还有一种除法//,称为地板除,两个整数相除的结果仍然是整数(这里的操作就是取结果的整数部分,并没有做四舍五入的操作)
10 // 3     输出:3

另外Python还提供了一个取余数的操作,可以得到两个整数相除的余数
10 % 3    输出:1

无论整数做//除法还是取余数，结果永远是整数，所以，整数运算结果永远是精确的。

注意:Python的整数大小没有限制.
浮点数大小也没有限制,但是超出一定范围后就直接表示为inf(无限大)





















